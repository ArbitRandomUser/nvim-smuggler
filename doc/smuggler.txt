*smuggler.txt* Send code to your Julia REPL, get diagnostics in return.

 _   ___     ___                ____                              _           ~
| \ | \ \   / (_)_ __ ___      / ___| _ __ ___  _   _  __ _  __ _| | ___ _ __ ~
|  \| |\ \ / /| | '_ ` _ \ ____\___ \| '_ ` _ \| | | |/ _` |/ _` | |/ _ \ '__|~
| |\  | \ V / | | | | | | |_____|__) | | | | | | |_| | (_| | (_| | |  __/ |   ~
|_| \_|  \_/  |_|_| |_| |_|    |____/|_| |_| |_|\__,_|\__, |\__, |_|\___|_|   ~
                                                      |___/ |___/             ~

       Well, listen up, folks! `REPLSmuggler.jl` just slipped into your 
                    cozy REPL like a shadow in the night.
            See also: https://github.com/klafyvel/REPLSmuggler.jl


Author: Hugo "klafyvel" Levy-Falk                            *smuggler-author*
==============================================================================
CONTENTS                                                   *smuggler-contents*

  1. Usage .................................................. |smuggler-usage|
  2. Lua API .............................................. |smuggler-lua-api|
  3. Mappings ............................................ |smuggler-mappings|
  4. Configuration .................................. |smuggler-configuration|
  4. License .............................................. |smuggler-license|
  5. Contributing .................................... |smuggler-contributing|
  6. Credits .............................................. |smuggler-credits|

==============================================================================
USAGE                                                         *smuggler-usage*

The plugin defines two commands to send text to the REPL. There is also a
command to (re)configure the current buffer. It is called by the other
commands if there is no configuration available yet. If an error occurs while
executing code, nvim-smuggler will create diagnostics for you. See
|diagnostic.txt| for details on how to configure diagnostics. The plugin will
also set the |quickfix| list and open the quickfix window. 

                                                                    *:Smuggle*
  :<count>Smuggle       Send <count> lines to the REPL. Defaults to the
                        current line.

                                                               *:SmuggleRange*
  :<range>SmuggleRange  Send <range> to the REPL.
                                                              *:SmuggleVisual*
  :SmuggleVisual        Send the visual selection to the REPL.

                                                              *:SmuggleConfig*
  :SmuggleConfig        (Re)configure the current buffer. Note that
                        configuration is buffer-local, but multiple buffers
                        can send code to the same REPL. The command will
                        prompt you to choose a Unix socket and then will
                        connect to it. If a socket was already configured, it
                        will close the former connection first.

                                                           *:SmuggleInterrupt*
  :SmuggleInterrupt     Interrupt the current command.

                                                                *:SmuggleExit*
  :SmuggleExit          Exit the current session.

                                                        *:SmuggleEvalByBlocks*
  :SmuggleEvalByBlocks  Set evaluation mode to "blocks", which means if you
                        send multiple lines at once, they will be evaluated as
                        one single REPL entry.
                                                     *:SmuggleEvalByStatement*
  :SmuggleEvalByStatement
                        Set evaluation mode to "statement", which means if you
                        send multiple lines at once, they will be broken down
                        in toplevel statements and evaluated one by one.

                                                     *:SmuggleHideDiagnostics*
  :SmuggleHideDiagnostics
                        Hide smuggler's diagnostics.

                                                     *:SmuggleShowDiagnostics*
  :SmuggleShowDiagnostics
                        Show smuggler's diagnostics.

                                                    *:SmuggleResetDiagnostics*
  :SmuggleResetDiagnostics
                        Reset smuggler's diagnostics.

==============================================================================
LUA API                                                     *smuggler-lua-api*

The commands listed in |smuggler-usage| call the following lua functions.

                                                     *smuggler-lua-send-lines*
  send_lines(count)     Send `count` lines starting from the current line.

                                                     *smuggler-lua-send-range*
  send_range(l1, l2)    Send the lines `l1` to `l2`, inclusive and 1-indexed.

                                                      *smuggler-lua-bufconfig*
  bufconfig(bufnbr, force)
                        Configure the buffer `bufnbr`. If `force` is set to
                        `true`, any existing configuration is overwritten. If
                        a connection was active it is also closed. Will start
                        a new connection if needed.

                                                      *smuggler-lua-interrupt*
  interrupt()           Interrupt the current command.

                                                           *smuggler-lua-exit*
  exit()                Exit the current session.

                                              *smuggler-lua-configure_session*
  configure_session(settings)
                        Configure the current session with the given settings.
                        The available settings are defined in
                        REPLSmuggler.jl's protocol.

The following function can be used to define an operator, see |:map-operator|.

                                                            *smuggler-send-op*
  send_op(type)         Send the text between the `'[` and `']` marks to the
                        REPL. `type` must be a string and sets the behavior of
                        the function:
                        - `type="line"` send the lines between the two marks
                          (inclusive),
                        - `type="block"` not implemented yet,
                        - `type="char"` send the text between the two marks
                          (inclusive).
                        This function is intended to be used with text objects
                        as an operator. To do so, you can map it using: 
                        `<Cmd>set opfunc=v:lua.require'smuggler'.send_op<cr>g@`

The plugin can be configured using its `setup` function.

                                                              *smuggler-setup*
  setup(opt)            Configure nvim-smuggler using the given options. See
                        |smuggler-configuration| for options.

==============================================================================
MAPPINGS                                                   *smuggler-mappings*

The following default mappings are defined.

------------------------------------------------------------------------------
NORMAL MODE                                         *smuggler-normal-mappings*

  <leader>cs            Mapped to |:Smuggle|.
  <leader>ce            Mapped to |:SmuggleConfig|.
  gcs                   Mapped to |smuggler-send-op|. Use it to send
                        |text-objects|. For example, `gcsap` sends a pararaph.

------------------------------------------------------------------------------
VISUAL MODE                                         *smuggler-visual-mappings*

  <leader>cs            Mapped to |:SmuggleRange|.

==============================================================================
CONFIGURATION                                         *smuggler-configuration*

The plugin is initialized through its `setup` function, which takes a table as
its sole argument. The options are the following (given with their default
values): >
  {
    mappings = { -- set to false to disable all mappings.
      smuggle = "<leader>cs", -- Mapping for Smuggle in normal mode.
      smuggle_range = "<leader>cs", -- For SmuggleRange in visual mode.
      smuggle_config = "<leader>ce", -- SmuggleConfig in normal mode.
      smuggle_operator = "gcs", -- SmuggleOperator in normal mode.
    },
    eval_by_blocks = false, -- Configure each new session eval by block attribute.
  }
<
If you use the `rocks.nvim` package manager, you can use the
`rocks-config.nvim` package to call `setup` in
`.config/nvim/lua/plugins/smuggler.lua`: >
  require('smuggler').setup({ ... })
>
If you use the `lazy.nvim` package manager, you can provide the configuration
directly with the installation: >
  {
    "klafyvel/nvim-smuggler",
    opts = {
        ...
    },
    dependencies = { "nvim-neotest/nvim-nio" },
  }
>
==============================================================================
LICENSE                                                     *smuggler-license*

NVim-Smuggler is available under the MIT license 
(https://choosealicense.com/licenses/mit/).

==============================================================================
CONTRIBUTING                                           *smuggler-contributing*

Contributions, bug reports, and suggestions are most welcome! Please visit our
GitHub page at https://github.com/klafyvel/nvim-smuggler.

==============================================================================
CREDITS                                                     *smuggler-credits*

NVim-Smuggler is inspired by the great vim-slime
(https://github.com/jpalardy/vim-slime).

The asynchronous stuff are handled by nvim-nio
(https://github.com/nvim-neotest/nvim-nio).

vim:tw=78:ts=8:ft=help:norl:
